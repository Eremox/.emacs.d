(ns sicp.core)

(defn foo
  "I don't do a whole lot."
  [x]
  (println x "Hello, World!"))

(def n-times
  (fn[n]
    (if (<= n 1)
      (println "Hello World")
      (do (println "Hello World")
          (recur (dec n))))))

(defn gcd [a b]
  (if (zero? b)
    a
    (recur b (mod a b))))

(defn find-co-prime []
  (let [a (rand-int 2147000000)
        b (rand-int 2147000000)]
    (if (= (gcd a b) 1)
      (vector a b)
      (recur))))


(fn [num lst]
  (for [number lst]
    (for [n (range num)]
      (println number)))
  nil)

(def prn-elems-n-times
  (fn [num lst]
  (if-not (empty? lst)
    (do (dotimes [n num]
          (println (first lst)))
        (recur num (rest lst))))))

(def prn-less-than-delim
  (fn [delim lst]
  (if (first lst)
    (do (if (< (first lst) delim)
          (println (first lst)))
        (recur delim (rest lst))))))

(def filter-odd-nths 
  (fn [lst]
    (loop [n (count lst)
           lst lst]
      (if-not (zero? n)
        (do (if (odd? n) 
              (println (first lst)))
            (recur (dec n) (rest lst)))))))

(def remove-at-odd-nth
  (fn [lst]
    (let [len (count lst)]
      (loop [i 0, lst lst]
        (if (< i len)
          (do (if (odd? i)
                (println (first lst)))
              (recur (inc i) (rest lst))))))))

(def my-range
   (fn [n]
     (loop [i 0, lst []]
       (if (>= i n)
         lst
         (recur (inc i) (conj lst i))))))


(def my-reverse
  (fn [lst]
    (loop [[car & cdr] (seq lst)
           rev '()]
      (if car
        (recur cdr (cons car rev))
        rev))))

(def reduce-odds
  (fn  [lst]
    (loop [acc 0, lst lst]
      (if (first lst)
        (if (odd? (first lst))
          (recur (+ acc (first lst)) (rest lst))
          (recur acc (rest lst)))
        acc))))

(def abs-on-lst
  (fn  [lst]
    (loop [acc [], lst lst]
      (if (first lst)
        (recur (conj acc (-
                          (bit-xor (first lst)
                                   (bit-shift-right (first lst)
                                                    31))
                          (bit-shift-right (first lst)
                                           31)))
               (rest lst))
        acc))))



