import Distribution.Simple
import Data.Bits

main :: IO ()
main = defaultMain


double :: Num a => a -> a
double x = x * x

power x n = if n > 1
             then power (double x) (n - 1)
             else x

charName :: Char -> String
charName 'a' = "Albert"
charName 't' = "Tobias"
charName 'e' = "Eremox"

myEven :: Int -> Bool
myEven x = (x .&. 1) == 0


absolute :: Int -> Int
absolute x = x ^ shiftR x 31 - shiftR x 31 


-- heron :: Int Int Int -> Double
heron a b c = sqrt (s * (s - a) * (s - b)  * (s - c))
  where s = (a + b + c) / 2

app :: a -> [a] -> [a]
app x xs = x:xs

filterEvens :: [Int] -> [Int]
filterEvens [] = []
filterEvens (x:xs)
  | myEven x  = x : filterEvens xs
  | otherwise = filterEvens xs

