;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(f f)" "(trace f)" "trace" "(doc trace)" "(ns sicp.core)" "(trace f)" "(f f)" "(ns sicp.core)" "(use 'overtone.live)" "(ol/demo (ol/sin-osc))" "(once-only (square [x y] (+ x y)))" "(defmacro once-only [[name args & body]]
        (let [gen-args (mapv gensym args)]
          `(~name ~gen-args
             ~@body)))" "(once-only (square [x y] (+ x y)))" "(once-only square [x y] (+ x y))" "(defmacro once-only [name args & body]
        (let [gen-args (mapv gensym args)]
          `(~name ~gen-args
             ~@body)))" "(once-only square [x y] '(+ x y))" "(defmacro once-only [name args & body]
        (let [gen-syms (mapv gensym ~args)]
          `(defn ~name ~gen-syms
             ~@body)))" "(once-only square [x y] '(+ x y))" "(once-only square [x y] (println x y))" "(defmacro once-only [name args & body]
        (let [gen-syms (mapv #([% gensym]) ~args)]
          `(defmacro ~name ~gen-syms
             ~@body)))" "(def wrtie (connect freenode running))" "(def wrtie (connect freenode runnning))" "(gen-block \"html\" \"<p>Hello, World!</p>\")" "(gen \"html\" (gen \"body\" (eval (gen \"p\" \"Hello, world!\"))))" "(gen \"html\" (eval (gen \"body\" (eval (gen \"p\" \"Hello, world!\")))))" "(gen \"html\" (gen \"body\" (gen \"p\" \"Hello, world!\")))" "(gen \"html\" \"<p>Hello, World!</p>\")" "(def write (connect freenode running))" "(gen \"html\" [\"hello\"])" "(gen \"html\" \"<p>Hello, World!</p>\")" "(def write (connect freenode running))" "(quit println \"Going for lunch. Be back!\")" "(ns irc-dilbertbot.core)" "(str \"\\\"/PART #test :message\\\"\")" "\"\\\"/PART #test :message\\\"\"" "(run-tests irc-dilbertbot.test)" "(run-tests irc-dilberbot.test)" "(ns irc-dilbertbot.test)" "(quit println \"Going for lunch. Be back!\")" "(quit println \"clojure\" \"Going for lunch. Be back!\")" "(part println \"clojure\" \"Going for lunch. Be back!\")" "(ident println \"tobias Mattsson\")" "(ident println \"eremox\" 0 \"tobias Mattsson\")" "(def write (connect freenode running))" "(ident println \"eremox\" 0 \"tobias Mattsson\")" "(def write (connect freenode running))" "(ident println \"eremox\" 0 \"tobias Mattsson\")" "(ident println \"eremox\" \"tobias Mattsson\")" "(ident 'println \"eremox\" \"tobias Mattsson\")" "(def write (connect freenode running))" "(def write (contact freenode running))" "(ns irc-dilbertbot.core)" "(doc clojure.core.typed/loop)" "(doc loop>)" "(doc loop)" "IFn" "(double (* 9 9))" "(double (* 99 9))" "(cf (def double (fn [x :- Number] :- Number, (* x 2))))" "(double 5)" "(cf (def double (fn [x :- Number] :- Number (* x 2))))" "(cf (fn [x :- Number] :- Number (* x 2)))" "(cf (fn [[x :- Number]] (* x 2)))" "(cf (fn> [[x :- Number]] (* x 2)))" "c" "(cf (def c \"Hello, World!\"))" "(ann ^nocheck c String)" "(ann x)" "ann" "(meta x)" "x" "(cf x)" "(cf (def x \"Hello, World!\"))" "x" "(cf (ann x String))" "(-main)" "(println (:out (sh \"cowsay\" \"Printing a command-line output\")))" "(shprint \"hello\")" "(ns clocrypt.core)" "(f 10 1)" "(def f (lambda (x y) (+ x y)))" "(defmacro lambda [args & exprs]
                (when (and args exprs)
                  `(fn [~@args] ~@exprs)))" "(def f (lambda '(x y) (+ x y)))" "(def f (lambda (x y) (+ x y)))" "(f 10 1)" "(def f (lambda [x y] (+ x y)))" "(defmacro lambda [args & exprs]
                (when (and args exprs)
                  `(fn ~args ~@exprs)))" "(for-loop [10] (println 10))" "(for-loop [10] 10)" "(for-loop [10] (* 90 90 10))" "(for-loop 10 (* 90 90 10))" "(for-loop 10 10)" "(defmacro for-loop [n & forms]
                (when (and n forms)
                  `(loop [times# ~@n]
                     (if (<= times# 1)
                       ~@forms
                       (do ~@forms
                           (recur (dec times#)))))))" "(for-loop [10] (println \"Working=?\"))" "(defmacro for-loop [n & forms]
                (when (and n forms)
                  `(loop [times# ~@n]
                     (if (< times# 1)
                       nil
                       (do ~@forms
                           (recur (dec times#)))))))" "(for-loop [10] (println \"Working=?\"))" "(defmacro for-loop [n & forms]
                (when (and n forms)
                  `(loop [times ~@n]
                     (if (< times 1)
                       nil
                       (do ~@forms
                           (recur (dec times)))))))" "h" "(setq h 5)" "(defmacro setq [v1 e]
                `(def ~v1 ~e))" "(setq h 5)" "(defmacro setq [v1 e]
                (list 'def ~v1 ~e))" "(source cond)" "(use 'clojure.repl)" "(use 'clojure.pprint)" "(ns erujolc.core)" "(vals @xatom)" "(values @xatom)" "(keys @xatom)" "@xatom" "xatom" "(def xatom (atom {:nick \"Eremox\" :original \"Eremos\" :meaning \"Hermit\"}))" "(transfer-accdb first second 10)" "(transfer-accdb first accdb 10)" "(transfer-accdb (first accdb) (second accdb) 10)" "@(first a)" "@(second a)" "(second a)" "(transfer (second a) (first a) 20)" "a" "(def a (accounts 10))" "(transfer (second a) (first a) 20)" "(transfer (rand-nth a) (rand-nth a) 20)" "a" "(def a (accounts 10))" "a" "(def a (accounts 10))" "(xextract (Account. \"Nick\" 10) 1)" "(xextract (Account. \"Nick\" 10) 10)" "(xextract 20 (Account. \"Nick\" 10))" "(Account. \"Nick\" 10)" "(start-up freenode)" "(do (def irc (connect freenode))
                    (write irc
                           \"/msg NickServ IDENTIFY Eremox killkillboss\"))" "(do (def irc (connect freenode))
                    (login irc user))" "(login irc user)" "d" "(def irc (connect freenode))" "*out*" "(fib 100)" "(fib 10)" "(ns lisp-problems.core)" "(xreplace \"trey\")" "(xflatten '(1 (2 (3 4) 5)))" "x" "(flatten '(1 (2 (3 4) 5)))" "(x2flatten '(1 (2 (3 4) 5)))" "(source flatten)" "(xflatten '(1 (2 (3 4) 5)))" "(xflatten [1 [2 [3 4] 5]])" "(xflatten [1 [2 [3] 3] 6])" "(cons 8 nil)" "(source cons)" "(use 'clojure.repl)" "(xflatten x)" "x" "(def x [[0 1 2] 2 [3 2] 2 2])" "(ns lisp-problems.core)" "(get-closest 99 66 points)" "(ppoints points)" "(gen-points 3 512 512)" "(apply #(+ %1 %2) (gen-points 3 512 512))" "(gen-points 3 512 512)" "(+ 9 3)")